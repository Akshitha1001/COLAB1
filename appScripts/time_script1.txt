// Created by Sujay S. Phadke, 2017
// All Rights Reserved.
// Github: https://github.com/electronicsguy
//
// Read/Write to Google Sheets using REST API.
// Can be used with ESP8266 & other embedded IoT devices.
// 
// Use this file with the ESP8266 library HTTPSRedirect
// 
// doGet() and doPost() need the spreadsheet ID. Cannot use "active spreadsheet" here since
// the device can operate without the spreadsheet even being open.
// http://stackoverflow.com/questions/4024271/rest-api-best-practices-where-to-put-parameters
// http://trevorfox.com/2015/03/rest-api-with-google-apps-script

// Similar API docs:
// https://gspread.readthedocs.org/en/latest/
// https://smartsheet-platform.github.io/api-docs/#versioning-and-changes
// http://search.cpan.org/~jmcnamara/Excel-Writer-XLSX/lib/Excel/Writer/XLSX.pm

// http://forum.espruino.com/conversations/269510/
// http://stackoverflow.com/questions/34691425/difference-between-getvalue-and-getdisplayvalue-on-google-app-script
// http://ramblings.mcpher.com/Home/excelquirks/gooscript/optimize

// Things to remember with getValue() object format:
// 1. Partial dates or times-only will be replaced with a full date + time, probably in the
//    year 1989. Like this: Sat Dec 30 1899 08:09:00 GMT-0500 (EST)
// 2. Dollar ($) currency symbol will be absent if cell contains currency.
//    This may be locale-dependent.
// 3. Scientific notation will be replaced by decimal numbers like this: 0.0000055

// Script examples
// https://developers.google.com/adwords/scripts/docs/examples/spreadsheetapp

var SS = SpreadsheetApp.openById('12ZrdO3mdJyoQZkD3svH5aNOiOGL5sYk6pUXFRYs-xjw');
var sheet = SS.getSheetByName('Sheet1');
var str = "";

function onOpen(){
  var ui = SpreadsheetApp.getUi();
  ui.createMenu('ESP8266 Logging')
  .addItem('Clear', 'Clear')
  .addToUi();
}

function Clear(){
  sheet.deleteRows(4, sheet.getLastRow());
  SS.toast('Chart cleared', 'ESP8266 logging', 5);
}


function getJsonDataBasdOnTime() {

  var SHEET_NAME ='Sheet1';
  var COLUMN_NUMBER = 4;

  var rowNumber = getRowNumber();
  //var endingRowNumber = startingRowNumber+35;
 
  
  
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var sheet = ss.getSheetByName(SHEET_NAME);
  
  jsonOutput = [];
  
  var value = sheet.getRange(rowNumber, COLUMN_NUMBER).getValue();
  Logger.log("row number: "+ rowNumber)
  if(value)
    jsonOutput.push(value);
  else
    jsonOutput.push(0);
  
  return jsonOutput;
}

function addDepth(depth) {

  var SHEET_NAME ='Sheet1';
  
  var rowNumber = getRowNumber();
  
  var power = 0;
  if(depth>10)
      power =1;
            
  var tmp = SS.getSheetByName(SHEET_NAME);
  currentTime = new Date();
  var hour = currentTime.getHours();
  var min = currentTime.getMinutes();
  var seconds = currentTime.getSeconds();
  var dataArr =[[rowNumber,hour+":"+min+":"+seconds+".",depth,power]];     

  var range = tmp.getRange("A"+rowNumber+":D"+rowNumber);
  Logger.log("data array :"+ dataArr);
  range.setValues(dataArr);
  SpreadsheetApp.flush();
  return power;
  

}
function getRowNumber(){
  currentTime = new Date();
  var hour = currentTime.getHours();
  var min = currentTime.getMinutes();
  var seconds = currentTime.getSeconds();
  
  var roundedMins = min;
  var roundedSeconds = Math.floor(seconds/15);
  
  var rowNumber = hour*60*4 + roundedMins*4 + roundedSeconds;
  return rowNumber;
  
}

function doGet(e){
  
  var depth = e.parameter.depth;
  Logger.log("depth: "+depth);
  if(depth)
    addDepth(depth)
  var unprocessedRowsData = getJsonDataBasdOnTime();
  
  return ContentService.createTextOutput(JSON.stringify(unprocessedRowsData) ).setMimeType(ContentService.MimeType.JSON);

}


function doPost(e) {

  var parsedData;
  var result = {};
  
  try { 
    parsedData = JSON.parse(e.postData.contents);
  } 
  catch(f){
    return ContentService.createTextOutput("Error in parsing request body: " + f.message);
  }
  Logger.log("parsed data : "+parsedData)
  if (parsedData !== undefined){
    // Common items first
    // data format: 0 = display value(literal), 1 = object value
    var flag = parsedData.format;
    
    if (flag === undefined){
      flag = 0;
    }
    
    switch (parsedData.command) {
      case "appendRow":
        var depth  = parsedData.depth
        Logger.log(depth)
        Logger.log(typeof(depth))
        var power = addDepth(depth)


    }
    
    return ContentService.createTextOutput(JSON.stringify([power]) ).setMimeType(ContentService.MimeType.JSON);
  } // endif (parsedData !== undefined)
  
  else{
    return ContentService.createTextOutput("Error! Request body empty or in incorrect format.");
  }
  
  
}

